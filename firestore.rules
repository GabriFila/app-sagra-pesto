rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    allow read: if false;
    allow write: if false;
      match /sagre/{sagraId} {
        allow read: if false;
  			allow write: if false;
      	match /services/{serviceId} {
    			allow get: if hasRole('admin');
    			allow list: if hasRole('admin');
          allow create: if hasRole('admin') && checkFields(['end', 'lastOrderNum','startingCourses', 'start', 'totalInstantOrders', 'totalInstantRevenue', 'totalOrders', 'totalPeople', 'totalRevenue'],[]);
          allow update: if hasRole('admin') && editOnlyCertainFields(['end']) 
          allow delete: if false;
          match /orders/{orderId} {
            allow get: if false;
            allow list: if hasRole('cameriere');
            allow create: if false;
            allow update: if hasRole('cameriere') && editOnlyCertainFields(['tableNum',"waiterId","waiterName","status"]) && resource.data["status"] == "pending";
            allow delete: if false;
          }
          match /courses/{courseId} {
            allow get: if false;
            allow list: if hasRole('cameriere');
            allow write: if false;
            allow create: if false;
            allow update: if hasRole('cameriere') && editOnlyCertainFields(["status"])
            allow delete: if false;
          }
          match /instantOrders/{instantOrderId} {
            allow get: if false;
            allow list: if false;
            allow create: if hasRole('cassa-istantanea') && checkFields(['courses','revenue'],[])
            allow update: if false;
            allow delete: if false;
          }
        }
        match /storage/{storageid} {
        	allow get: if hasRole('admin');
          allow list: if false;
          allow create: if false;
          allow update: if hasRole('admin') && checkFields(['storageCourses'], []);
          allow delete: if false;
        }
		  	allow read: if false;
  			allow write: if false;
  
      }
  }
}

function hasRole(reqRole) {
	return request.auth.token[reqRole] == true;
}

function checkFields(requiredFields, optionalFields) {
  let allFields = requiredFields.concat(optionalFields);
  return  request.resource.data.keys().hasAll(requiredFields) && request.resource.data.keys().hasOnly(allFields);
}

function editOnlyCertainFields(editableFields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasOnly(editableFields) && request.resource.data.diff(resource.data).affectedKeys().hasAll(editableFields)
}