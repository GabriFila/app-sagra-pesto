rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
      match /sagre/{sagraId} {
      	match /services/{serviceId} {
    			allow read: if isLoggedIn() && hasRole('admin');
          allow create: if isLoggedIn() && hasRole('admin');
          allow update: if isLoggedIn() && hasRole('admin') && notUpdating("start") && notUpdating("totalRevenue") && notUpdating("totalRevenue") 
                                        && notUpdating("totalInstantRevenue") && notUpdating("totalPeople") && notUpdating("lastOrderNum") 
                                        && notUpdating("totalInstantOrders") && notUpdating("totalOrders") && notUpdating("startingCourses");
          allow delete: if false;
          match /orders/{orderId} {
            allow get: if false;
            allow list: if isLoggedIn() && hasRole('cameriere');
            allow create: if false;
            allow update: if isLoggedIn() && hasRole('cameriere') && notUpdating("people") && notUpdating("orderNum") && notUpdating("status")
                                         && notUpdating("revenue") && notUpdating("note") && isNullInDB("tableNum");
            allow delete: if false;
          }
          match /courses/{courseId} {
            allow get: if false;
            allow list: if isLoggedIn() && hasRole('cameriere');
            allow write: if false;
          }
          match /instantOrders/{instantOrderId} {
            allow read: if false;
            allow create: if isLoggedIn() && hasRole('cassa-istantanea') 
            allow update: if false;
            allow delete: if false;
          }
        }
        match /storage/{storageid} {
        	allow get: if isLoggedIn() && hasRole('admin');
          allow list: if false;
          allow create: if false;
          allow update: if isLoggedIn() && hasRole('admin');
          allow delete: if false;
        }
		  	allow read: if false;
  			allow write: if false;
  
      }
      	allow read: if false;
    		allow write: if false;
  }
}


function hasRole(reqRole) {
	return request.auth.token[reqRole] == true;
}

function isLoggedIn() {
	return request.auth.uid != null;
}

function isNullInDB(field) {
	return resource.data[field] == null;
}

function notUpdating(field) {
 return !(field in request.resource.data) || resource.data[field] == request.resource.data[field]
}